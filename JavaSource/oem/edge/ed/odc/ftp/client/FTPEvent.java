package oem.edge.ed.odc.ftp.client;

import java.util.Vector;

import oem.edge.ed.odc.dsmp.common.DSMPEvent;
/*                       Copyright Header Check                             */
/*   --------------------------------------------------------------------   */
/*                                                                          */
/*     OCO Source Materials                                                 */
/*                                                                          */
/*     Product(s): PROFIT                                                   */
/*                                                                          */
/*     (C)Copyright IBM Corp. 2003-2006                                     */
/*                                                                          */
/*     All Rights Reserved                                                  */
/*     US Government Users Restricted Rights                                */
/*                                                                          */
/*     The source code for this program is not published or otherwise       */
/*     divested of its trade secrets, irrespective of what has been         */
/*     deposited with the US Copyright Office.                              */
/*                                                                          */
/*   --------------------------------------------------------------------   */
/*     Please do not remove any of these commented lines  20 lines          */
/*   --------------------------------------------------------------------   */
/*                       Copyright Footer Check                             */

/**
 * An FTP event generated by a FTPDispatcher in response to protocol received
 * from the ftp server. See the is*() methods for definition of valid properties
 * set for specific event types.
 *
 * @version 1.0.0.0 02/21/2003
 * @author Mike Zarnick
 */
public class FTPEvent extends DSMPEvent {
	/**
	 * Constant used to indicate <i>login</i> request succeeded.
	 * @see #isLogin()
	 * @see #reason
	 */
	static public int LOGIN = 0;
	/**
	 * Constant used to indicate <i>login</i> request failed.
	 * @see #isLoginFailed()
	 * @see #reason
	 */
	static public int LOGIN_FAILED = 1;
	/**
	 * Constant used to indicate <i>logout</i> request succeeded.
	 * @see #isLogout()
	 * @see #reason
	 */
	static public int LOGOUT = 2;
	/**
	 * Constant used to indicate <i>logout</i> request failed.
	 * @see #isLogoutFailed()
	 * @see #reason
	 */
	static public int LOGOUT_FAILED = 3;
	/**
	 * Constant used to indicate <i>new folder</i> request succeeded.
	 * @see #isNewFolder()
	 * @see #reason
	 */
	static public int NEWFOLDER = 4;
	/**
	 * Constant used to indicate <i>new folder</i> request failed.
	 * @see #isNewFolderFailed()
	 * @see #reason
	 */
	static public int NEWFOLDER_FAILED = 5;
	/**
	 * Constant used to indicate <i>list area</i> request succeeded.
	 * @see #isListArea()
	 * @see #reason
	 */
	static public int LISTAREA = 6;
	/**
	 * Constant used to indicate <i>list area</i> request failed.
	 * @see #isListAreaFailed()
	 * @see #reason
	 */
	static public int LISTAREA_FAILED = 7;
	/**
	 * Constant used to indicate <i>delete file</i> request succeeded.
	 * @see #isDelete()
	 * @see #reason
	 */
	static public int DELETE = 8;
	/**
	 * Constant used to indicate <i>delete file</i> request failed.
	 * @see #isDeleteFailed()
	 * @see #reason
	 */
	static public int DELETE_FAILED = 9;
	/**
	 * Constant used to indicate <i>change area</i> request succeeded.
	 * @see #isChangeArea()
	 * @see #reason
	 */
	static public int CHANGEAREA = 10;
	/**
	 * Constant used to indicate <i>change area</i> request failed.
	 * @see #isChangeAreaFailed()
	 * @see #reason
	 */
	static public int CHANGEAREA_FAILED = 11;
	/**
	 * Constant used to indicate <i>download</i> request succeeded.
	 * @see #isDownload()
	 * @see #reason
	 */
	static public int DOWNLOAD = 19;
	/**
	 * Constant used to indicate <i>download</i> request succeeded.
	 * @see #isDownload()
	 * @see #reason
	 */
	static public int DOWNLOAD_ABORTED = 20;
	/**
	 * Constant used to indicate <i>download aborted</i> received from server.
	 * @see #isDownloadAborted()
	 * @see #reason
	 */
	static public int DOWNLOAD_FAILED = 21;
	/**
	 * Constant used to indicate <i>upload</i> request succeeded.
	 * @see #isUpload()
	 * @see #reason
	 */
	static public int UPLOAD = 22;
	/**
	 * Constant used to indicate <i>upload</i> request failed.
	 * @see #isUpload()
	 * @see #reason
	 */
	static public int UPLOAD_FAILED = 23;
	/**
	 * Constant used to indicate <i>download data</i> received from server.
	 * @see #isDataDown()
	 * @see #reason
	 */
	static public int DATA_DOWN = 24;
	/**
	 * Constant used to indicate <i>upload data</i> request failed.
	 * @see #isDataUpError()
	 * @see #reason
	 */
	static public int DATA_UPERROR = 25;
	/**
	 * Constant used to indicate <i>abort upload</i> request succeeded.
	 * @see #isAbortUp()
	 * @see #reason
	 */
	static public int ABORTUP = 26;
	/**
	 * Constant used to indicate <i>abort upload</i> request failed.
	 * @see #isAbortUpFailed()
	 * @see #reason
	 */
	static public int ABORTUP_FAILED = 27;
	/**
	 * Constant used to indicate <i>abort download</i> request succeeded.
	 * @see #isAbortDown()
	 * @see #reason
	 */
	static public int ABORTDOWN = 28;
	/**
	 * Constant used to indicate <i>abort download</i> request failed.
	 * @see #isAbortDownFailed()
	 * @see #reason
	 */
	static public int ABORTDOWN_FAILED = 29;
	/**
	 * Constant used to indicate <i>operation complete</i> received from server.
	 * @see #isOperationComplete()
	 * @see #reason
	 */
	static public int OPERATION_COMPLETE = 30;
	/**
	 * Constant used to indicate <i>connection closed</i> received from server.
	 * @see #isDeath()
	 * @see #reason
	 */
	static public int DEATH = 666;
	
	/**
	 * An int identifier. Not always valid, see various is*() methods to determine
	 * if property is set and to determine its specific meaning.
	 **/
	public int id;
	/**
	 * Name of server area (directory). Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public String area;
	/**
	 * Separator to use to delimit directies on server. Not always valid, see various is*() methods
	 * to determine if property is set.
	 **/
	public String separator;
	/**
	 * Error message. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public String message;
	/**
	 * Vector of area (directory) entries. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public Vector listdata;
	/**
	 * Size of file. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public long filelen;
	/**
	 * Offset into file. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public long fileofs;
	/**
	 * Array of file data. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public byte[] filedata;
	/**
	 * Offset of filedata in file. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public int filedataofs;
	/**
	 * Length of filedata. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public int filedatalen;
/**
 * FTPEvent constructor for basic events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as a FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle) {
	super(reason, flags, handle);
}
/**
 * FTPEvent constructor for ftp abort download events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as an FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 * @param id int
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #id
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle, int id) {
	this(reason, flags, handle);
	this.id = id;
}
/**
 * FTPEvent constructor for ftp upload reply events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as an FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 * @param id int
 * @param fileofs long
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #id
 * @see #fileofs
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle, int id, long fileofs) {
	this(reason, flags, handle);
	this.id = id;
	this.fileofs = fileofs;
}
/**
 * FTPEvent constructor for ftp download data events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as an FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 * @param id int
 * @param fileofs long
 * @param buffer byte[]
 * @param bufofs int
 * @param buflen int
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #id
 * @see #fileofs
 * @see #filedata
 * @see #filedataofs
 * @see #filedatalen
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle, int id, long fileofs, byte[] buffer, int bufofs, int buflen) {
	this(reason, flags, handle);
	this.id = id;
	this.fileofs = fileofs;
	this.filedata = buffer;
	this.filedataofs = bufofs;
	this.filedatalen = buflen;
}
/**
 * FTPEvent constructor for ftp download reply events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as an FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 * @param id int
 * @param fileofs long
 * @param filelen long
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #id
 * @see #fileofs
 * @see #filelen
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle, int id, long fileofs, long filesz) {
	this(reason, flags, handle);
	this.id = id;
	this.fileofs = fileofs;
	this.filelen = filesz;
}
/**
 * FTPEvent constructor for ftp download aborted events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as an FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 * @param id int
 * @param msg String
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #id
 * @see #message
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle, int id, String msg) {
	this(reason, flags, handle);
	this.id = id;
	this.message = msg;
}
/**
 * FTPEvent constructor for ftp login events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as an FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 * @param id int
 * @param area String
 * @param separator String
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #id
 * @see #area
 * @see #separator
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle, int loginID, String area, String separator) {
	this(reason, flags, handle);
	this.id = loginID;
	this.area = area;
	this.separator = separator;
}
/**
 * FTPEvent constructor for ftp error events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as an FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 * @param msg String
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #message
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle, String msg) {
	this(reason, flags, handle);
	this.message = msg;
}
/**
 * FTPEvent constructor for ftp list area reply events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as an FTPEventListener with FTPDispatcher instead.</p>
 * @param reason int
 * @param flags byte
 * @param handle byte
 * @param list Vector
 *
 * @see #reason
 * @see #flags
 * @see #handle
 * @see #listdata
 * @see #FTPDispatcher.addFTPListener()
 */
public FTPEvent(int reason, byte flags, byte handle, Vector list) {
	this(reason, flags, handle);
	this.listdata = list;
}
/**
 * Identifies a server response to an <i>abort download</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>id - int identifier of file download operation</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @return true if this event represents a server response for an <i>abort download</i> 
 *              request which was processed without error
 */
public boolean isAbortDown() {
	return reason == ABORTDOWN;
}
/**
 * Identifies a server response to an <i>abort download</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for an <i>abort download</i> 
 *              request which encountered an error
 */
public boolean isAbortDownFailed() {
	return reason == ABORTDOWN_FAILED;
}
/**
 * Identifies a server response to an <i>abort upload</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>id - int identifier of file upload operation</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @return true if this event represents a server response for an <i>abort upload</i> 
 *              request which was processed without error
 */
public boolean isAbortUp() {
	return reason == ABORTUP;
}
/**
 * Identifies a server response to an <i>abort upload</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for an <i>abort upload</i> 
 *              request which encountered an error
 */
public boolean isAbortUpFailed() {
	return reason == ABORTUP_FAILED;
}
/**
 * Identifies a server response to a <i>change area</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @return true if this event represents a server response for a <i>change area</i> 
 *              request which was processed without error
 */
public boolean isChangeArea() {
	return reason == CHANGEAREA;
}
/**
 * Identifies a server response to a <i>change area</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for a <i>change area</i> 
 *              request which encountered an error
 */
public boolean isChangeAreaFailed() {
	return reason == CHANGEAREA_FAILED;
}
/**
 * Identifies a server message containing data for an ongoing download operation. The
 * server has sent the data without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>id - identifier of the download operation</li>
 * <li>fileofs - offset into the file for this data chunk</li>
 * <li>filedata - byte array of data</li>
 * <li>filedataofs - starting offset of data in filedata</li>
 * <li>filedatalen - length of data in filedata</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @see #fileofs
 * @see #filedata
 * @see #filedataofs
 * @see #filedatalen
 * @return true if this event represents a server message containing data for an ongoing
 *              download operation
 */
public boolean isDataDown() {
	return reason == DATA_DOWN;
}
/**
 * Identifies a server response to an <i>upload data</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>id - identifier of the upload operation</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for an <i>upload data</i> 
 *              request which encountered an error
 */
public boolean isDataUpError() {
	return reason == DATA_UPERROR;
}
/**
 * Identifies a <i>connection closed</i> event. The server encountered an
 * error and terminated the connection. No properties are defined for this event.
 *
 * @return true if this event represents an <i>connection closed</i> 
 *              event
 */
public boolean isDeath() {
	return reason == DEATH;
}
/**
 * Identifies a server response to a <i>delete</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @return true if this event represents a server response for a <i>delete</i> 
 *              request which was processed without error
 */
public boolean isDelete() {
	return reason == DELETE;
}
/**
 * Identifies a server response to an <i>delete</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for a <i>delete</i> 
 *              request which encountered an error
 */
public boolean isDeleteFailed() {
	return reason == DELETE_FAILED;
}
/**
 * Identifies a server response to a <i>download</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>id - identifier of the download operation</li>
 * <li>fileofs - offset into the file from where the download will begin</li>
 * <li>filelen - length of data to be sent for this download</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @see #fileofs
 * @see #filelen
 * @return true if this event represents a server response for a <i>download</i> 
 *              request which was processed without error
 */
public boolean isDownload() {
	return reason == DOWNLOAD;
}
/**
 * Identifies a <i>download aborted</i> event. The server encountered an
 * error while processing the download operaiton. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>id - int identifier of file download operation</li>
 * <li>message - String describing the error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @see #message
 * @return true if this event represents an <i>download aborted</i> 
 *              event
 */
public boolean isDownloadAborted() {
	return reason == DOWNLOAD_ABORTED;
}
/**
 * Identifies a server response to a <i>download</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for a <i>download</i> 
 *              request which encountered an error
 */
public boolean isDownloadFailed() {
	return reason == DOWNLOAD_FAILED;
}
/**
 * Identifies a server response to a <i>list area</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>listdata - Vector of AreaContent objects for each directory entry</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @see #listdata
 * @see #AreaContent
 * @return true if this event represents a server response for a <i>list area</i> 
 *              request which was processed without error
 */
public boolean isListArea() {
	return reason == LISTAREA;
}
/**
 * Identifies a server response to a <i>list area</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for a <i>list area</i> 
 *              request which encountered an error
 */
public boolean isListAreaFailed() {
	return reason == LISTAREA_FAILED;
}
/**
 * Identifies a server response to a <i>login</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>id - user's numeric id</li>
 * <li>area - user's initial area (directory) on remote server</li>
 * <li>separator - remote server's directory separator string</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @see #area
 * @see #separator
 * @return true if this event represents a server response for a <i>login</i> 
 *              request which was processed without error
 */
public boolean isLogin() {
	return reason == LOGIN;
}
/**
 * Identifies a server response to a <i>login</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for a <i>login</i> 
 *              request which encountered an error
 */
public boolean isLoginFailed() {
	return reason == LOGIN_FAILED;
}
/**
 * Identifies a server response to a <i>logout</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @return true if this event represents a server response for a <i>logout</i> 
 *              request which was processed without error
 */
public boolean isLogout() {
	return reason == LOGOUT;
}
/**
 * Identifies a server response to a <i>logout</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for a <i>logout</i> 
 *              request which encountered an error
 */
public boolean isLogoutFailed() {
	return reason == LOGOUT_FAILED;
}
/**
 * Identifies a server response to a <i>new folder</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @return true if this event represents a server response for a <i>new folder</i> 
 *              request which was processed without error
 */
public boolean isNewFolder() {
	return reason == NEWFOLDER;
}
/**
 * Identifies a server response to a <i>new folder</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for a <i>new folder</i> 
 *              request which encountered an error
 */
public boolean isNewFolderFailed() {
	return reason == NEWFOLDER_FAILED;
}
/**
 * Identifies an <i>operation complete</i> event. The server processed the
 * upload or download operaiton completely without error.  The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>id - int identifier of file download operation</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @return true if this event represents an <i>operation complete</i> 
 *              event
 */
public boolean isOperationComplete() {
	return reason == OPERATION_COMPLETE;
}
/**
 * Identifies a server response to an <i>upload</i> request. The
 * server processed the request without error. The following properties are
 * defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified with original request</li>
 * <li>id - identifier of the upload operation</li>
 * <li>fileofs - offset into the file from where the upload shall begin</li>
 * </ul>
 *
 * @see #handle
 * @see #id
 * @see #fileofs
 * @return true if this event represents a server response for an <i>upload</i> 
 *              request which was processed without error
 */
public boolean isUpload() {
	return reason == UPLOAD;
}
/**
 * Identifies a server response to an <i>upload</i> request. The
 * server encountered an error while processing the request. The following
 * properties are defined for this event:
 *
 * <ul>
 * <li>handle - byte identifier specified on original request</li>
 * <li>message - string which indicates error encountered</li>
 * </ul>
 *
 * @see #handle
 * @see #message
 * @return true if this event represents a server response for an <i>upload</i> 
 *              request which encountered an error
 */
public boolean isUploadFailed() {
	return reason == UPLOAD_FAILED;
}
}
