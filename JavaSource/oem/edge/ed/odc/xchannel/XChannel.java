package oem.edge.ed.odc.xchannel;

import java.awt.*;
import oem.edge.ed.odc.tunnel.common.*;
import java.net.*;
import java.io.*;

/*  ------------------------------------------------------------------   */ 
/*                       Copyright Header Check                          */
/*  ------------------------------------------------------------------   */ 
/*                                                                       */ 
/*   OCO Source Materials                                                */ 
/*                                                                       */ 
/*   Product(s): PROFIT                        		                 */ 
/*                                                                       */ 
/*   (C)Copyright IBM Corp. 2004,2005,2006		                 */ 
/*                                                                       */ 
/*     All Rights Reserved					         */ 
/*     US Government Users Restricted Rights			         */ 
/*                                                                       */ 
/*   The source code for this program is not published or otherwise      */ 
/*   divested of its trade secrets, irrespective of what has been        */ 
/*   deposited with the US Copyright Office.                             */ 
/*   ------------------------------------------------------------------  */
/*     Please do not remove any of these commented lines  21 lines       */
/*   ------------------------------------------------------------------  */
/*                       Copyright Footer Check                          */
/*   ------------------------------------------------------------------  */ 

/**
 * This type was generated by a SmartGuide.
 */
public class XChannel extends Frame implements Runnable {

  // Hack to fix for Gary for now. Bug in server relocation added in 5.3.1
   public boolean forcereplace = false;
   
   private Panel ivjContentsPane = null;
   IvjEventHandler ivjEventHandler = new IvjEventHandler();
   private Label ivjLabel1 = null;
   private TextField ivjTF_EdgeID = null;
   private TextField ivjTF_WBPwd = null;
   static public String connaddress = "http://edesign4.fishkill.ibm.com/technologyconnect/oddc";
   public java.lang.String chocolateChipCookie;
   public java.lang.String display;
   public java.lang.String proxyToConnectTo_Port;
   public java.lang.String EdgeID = null;
   public java.lang.String PassPhrase = null;
   private Dialog ivjErrorDialog = null;
   private Panel ivjContentsPane2 = null;
   private oem.edge.ed.sd.ProgressBar ivjProgressBar1 = null;
   private Completion ivjCompletion1 = null;
   private Dialog ivjStatusDialog = null;
   private Label ivjstatusText = null;
   private Button ivjButton3 = null;
   private Button ivjButton4 = null;
   private Panel ivjContentsPane3 = null;
   private Panel ivjContentsPane4 = null;
   private Label ivjLabel = null;
   private Label ivjLabel4 = null;
   private Label ivjLabel7 = null;
   private Label ivjLabel8 = null;
   private Dialog ivjSuccessDialog = null;
   private Button ivjCancel = null;
   private Button ivjOk = null;
   private Label ivjEdgeID = null;
   private Label ivjPassword = null;
   public static XProxy xp = new XProxy();
   public static ServerSocket skt;
	

   class IvjEventHandler implements java.awt.event.ActionListener, java.awt.event.TextListener, java.awt.event.WindowListener, java.beans.PropertyChangeListener {
      public void actionPerformed(java.awt.event.ActionEvent e) {
         if (e.getSource() == XChannel.this.getButton3()) 
            connEtoM1(e);
         if (e.getSource() == XChannel.this.getButton4()) 
            connEtoC7(e);
         if (e.getSource() == XChannel.this.getButton4()) 
            connEtoM4(e);
         if (e.getSource() == XChannel.this.getButton3()) 
            connEtoC4();
         if (e.getSource() == XChannel.this.getButton3()) 
            connEtoC5(e);
         if (e.getSource() == XChannel.this.getTF_EdgeID()) 
            connEtoM3(e);
         if (e.getSource() == XChannel.this.getOk()) 
            connEtoC10(e);
         if (e.getSource() == XChannel.this.getCancel()) 
            connEtoC11(e);
      };
      public void propertyChange(java.beans.PropertyChangeEvent evt) {
         if (evt.getSource() == XChannel.this.getCompletion1() && (evt.getPropertyName().equals("stat"))) 
            connPtoP2SetTarget();
         if (evt.getSource() == XChannel.this.getCompletion1() && (evt.getPropertyName().equals("percentCompleted"))) 
            connPtoP1SetTarget();
      };
      public void textValueChanged(java.awt.event.TextEvent e) {
         if (e.getSource() == XChannel.this.getTF_EdgeID()) 
            connEtoC2(e);
         if (e.getSource() == XChannel.this.getTF_WBPwd()) 
            connEtoC3(e);
      };
      public void windowActivated(java.awt.event.WindowEvent e) {};
      public void windowClosed(java.awt.event.WindowEvent e) {};
      public void windowClosing(java.awt.event.WindowEvent e) {
         if (e.getSource() == XChannel.this) 
            connEtoC1(e);
         if (e.getSource() == XChannel.this) 
            connEtoM6(e);
      };
      public void windowDeactivated(java.awt.event.WindowEvent e) {};
      public void windowDeiconified(java.awt.event.WindowEvent e) {};
      public void windowIconified(java.awt.event.WindowEvent e) {};
      public void windowOpened(java.awt.event.WindowEvent e) {};
   };
/**
 * XChannel constructor comment.
 */
   public XChannel() {
      super();
      initialize();
   }
/**
 * XChannel constructor comment.
 * @param title java.lang.String
 */
   public XChannel(String title) {
      super(title);
   }
/**
 * Insert the method's description here.
 * Creation date: (7/15/2003 1:15:17 PM)
 * @param args java.lang.String[]
 */
   public void begin() { 
      String urlYuk     = "/servlet/oem/edge/ed/odc/desktop";
      String pathCmd    = "/make-x-channel";
		
      try {
         getCompletion1().setPercentCompleted(15);
	         
         String urlInfo = connaddress + urlYuk + pathCmd + 
            "?owner=" + URLEncoder.encode(EdgeID) +
            "&passphrase=" + URLEncoder.encode(PassPhrase) + 
            "&display=" + URLEncoder.encode(display) +
            "&cookie=" + URLEncoder.encode(chocolateChipCookie);
            
         if (DebugPrint.isEnabled && DebugPrint.doDebug()) {
            DebugPrint.println(DebugPrint.DEBUG3, 
                               "WB: Connecting for the first time with urlInfo = " + urlInfo);
         }

         URLConnection2 connection = connect(urlInfo);
    
         String success  = connection.getHeaderField("success");

         getCompletion1().setPercentCompleted(75);
         if (DebugPrint.isEnabled && DebugPrint.doDebug()) {
            DebugPrint.println(DebugPrint.DEBUG3, 
                               "WB: Success = " + success);
         }

         success = success.trim();
			
        /*	
          InputStream in = connection.getInputStream();

          StringBuffer sb = new StringBuffer();
          byte[]  b =new byte[1056];
          int off = 0;
          int readBytes = 0;
          while((readBytes = in.read(b, off, b.length)) != -1){ 
          off += readBytes;
          sb.append(new String(b));
          }
         // System.out.println("The message from the server is : " + sb);
         */
         if(success.equalsIgnoreCase("false")) {
            String Location = connection.getHeaderField("location");
            if(Location != null) {
               Location = Location.trim();
               if (forcereplace) {
                  int idx = Location.indexOf("://");
                  if (idx > 0) {
                    // Find the start of the URI
                     idx = Location.indexOf("/", idx+3);
                     
                     if (idx > 0) {
                     
                       // Get context yuk off of connaddress
                        String caddr = connaddress;
                        int cidx = caddr.indexOf("://");
                        if (cidx > 0) {
                          // Find the start of the URI
                           cidx = caddr.indexOf("/", cidx+3);
                           if (cidx > 0) {
                              caddr = caddr.substring(0, cidx);
                           }
                        }
                        
                        Location = caddr + Location.substring(idx);
                        System.out.println("URI Refactored to : " + Location);
                     } else {
                        System.out.println("URI could NOT be refactored! " + Location);
                     }
                  } else {
                     System.out.println("URI could NOT be refactored! " + Location);
                  }
               }
            }
               
            if (DebugPrint.isEnabled && DebugPrint.doDebug()) {
               DebugPrint.println(DebugPrint.DEBUG3, 
                                  "WB: Location = " + Location);
            }

            if(Location == null){ 
               this.setVisible(false);
               showErrorDialog();
            }
            else{

               getCompletion1().setPercentCompleted(15);
              //urlInfo = proto + "://" + Location + context + urlYuk + pathCmd + "?owner=" + URLEncoder.encode(EdgeID) +
              // "&passphrase=" + URLEncoder.encode(PassPhrase) + "&display=" + URLEncoder.encode(XChannel.display) +
              // "&cookie=" + URLEncoder.encode(XChannel.chocolateChipCookie);
               urlInfo = Location;

               if (DebugPrint.isEnabled && DebugPrint.doDebug()) {
                  DebugPrint.println(DebugPrint.DEBUG3, 
                                     "WB: Reconnecting to urlInfo = " + urlInfo);
               }
               System.out.println("step 3");
               connection = connect(urlInfo);
               success  = connection.getHeaderField("success");
               success = success.trim();
               if(success.equalsIgnoreCase("false")) {
                  if (DebugPrint.isEnabled && DebugPrint.doDebug()) {
                     DebugPrint.println(DebugPrint.DEBUG3, 
                                        "WB: Connected twice and failed twice. success = " + success);
                  }
                  this.setVisible(false);
                  showErrorDialog();
               }
               else{
				 				
                  this.setVisible(false);
                  showSuccessDialog();
               }
            }
         }
         else {
            this.setVisible(false);
            showSuccessDialog();
         }
         getCompletion1().setPercentCompleted(100); 
      }
      catch(Exception ee){ee.printStackTrace();System.exit(0);}
   }
/**
 * Insert the method's description here.
 * Creation date: (7/23/2003 1:14:35 PM)
 * @return oem.edge.ed.odc.tunnel.common.URLConnection2
 * @param urlInfo java.lang.String
 */
   public URLConnection2 connect(String urlInfo) {

      URLConnection2 connection = null;
      try{
         connection = new URLConnection2(new URL(urlInfo));
      }
      catch(MalformedURLException mURLe){ mURLe.printStackTrace(); 
      return null;}
      getCompletion1().setPercentCompleted(45);
      connection.setUseCaches(false);
     // DebugPrint.setLevel(255);
      try{
         connection.connect();
      }
      catch(IOException ioe){ ioe.printStackTrace();
      return null;}
      getCompletion1().setPercentCompleted(60);

      return connection;
			
   }
/**
 * connEtoC1:  (XChannel.window.windowClosing(java.awt.event.WindowEvent) --> XChannel.dispose()V)
 * @param arg1 java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoC1(java.awt.event.WindowEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         this.dispose();
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoC10:  (Ok.action.actionPerformed(java.awt.event.ActionEvent) --> XChannel.startThreads()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoC10(java.awt.event.ActionEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         this.startThreads();
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoC11:  (Cancel.action.actionPerformed(java.awt.event.ActionEvent) --> XChannel.Exit(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoC11(java.awt.event.ActionEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         this.Exit(arg1);
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoC2:  (TF_EdgeID.text.textValueChanged(java.awt.event.TextEvent) --> XChannel.DataCollection(Ljava.awt.event.TextEvent;)V)
 * @param arg1 java.awt.event.TextEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoC2(java.awt.event.TextEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         this.DataCollection(arg1);
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoC3:  (TF_WBPwd.text.textValueChanged(java.awt.event.TextEvent) --> XChannel.DataCollection(Ljava.awt.event.TextEvent;)V)
 * @param arg1 java.awt.event.TextEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoC3(java.awt.event.TextEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         this.DataCollection(arg1);
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoC4:  (Button3.action. --> XChannel.kickXProxy()V)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoC4() {
      try {
        // user code begin {1}
        // user code end
         this.kickXProxy();
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoC5:  (Button3.action.actionPerformed(java.awt.event.ActionEvent) --> XChannel.Exit(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoC5(java.awt.event.ActionEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         this.Exit(arg1);
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoC7:  (Button4.action.actionPerformed(java.awt.event.ActionEvent) --> XChannel.ShowLoginWindow(Ljava.awt.event.ActionEvent;)V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoC7(java.awt.event.ActionEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         this.ShowLoginWindow(arg1);
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoM1:  (Button3.action.actionPerformed(java.awt.event.ActionEvent) --> Dialog1.dispose()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoM1(java.awt.event.ActionEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         getSuccessDialog().dispose();
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoM3:  (TF_EdgeID.action.actionPerformed(java.awt.event.ActionEvent) --> TF_WBPwd.requestFocus()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoM3(java.awt.event.ActionEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         getTF_WBPwd().requestFocus();
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoM4:  (Button4.action.actionPerformed(java.awt.event.ActionEvent) --> ErrorDialog.dispose()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoM4(java.awt.event.ActionEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         getErrorDialog().dispose();
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connEtoM6:  (XChannel.window.windowClosing(java.awt.event.WindowEvent) --> XChannel.dispose()V)
 * @param arg1 java.awt.event.WindowEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connEtoM6(java.awt.event.WindowEvent arg1) {
      try {
        // user code begin {1}
        // user code end
         this.dispose();
        // user code begin {2}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connPtoP1SetTarget:  (Completion1.percentCompleted <--> ProgressBar1.completion)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connPtoP1SetTarget() {
     /* Set the target from the source */
      try {
         getProgressBar1().setCompletion(getCompletion1().getPercentCompleted());
        // user code begin {1}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * connPtoP2SetTarget:  (statusText.text <--> Completion1.status)
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void connPtoP2SetTarget() {
     /* Set the target from the source */
      try {
         getstatusText().setText(getCompletion1().getStat());
        // user code begin {1}
        // user code end
      } catch (java.lang.Throwable ivjExc) {
        // user code begin {3}
        // user code end
         handleException(ivjExc);
      }
   }
/**
 * Comment
 */
   public void DataCollection(java.awt.event.TextEvent textEvent) {
      PassPhrase = getTF_WBPwd().getText();
      EdgeID = getTF_EdgeID().getText();
      getOk().setEnabled(PassPhrase != null && PassPhrase.length()   > 0 &&
                         EdgeID!= null && EdgeID.length()  > 0);
      return;
   }
/**
 * Comment
 */
   public void Exit(java.awt.event.ActionEvent actionEvent) {
      dispose();
      System.exit(0);
      return;
   }
/**
 * Return the Button3 property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Button getButton3() {
      if (ivjButton3 == null) {
         try {
            ivjButton3 = new java.awt.Button();
            ivjButton3.setName("Button3");
            ivjButton3.setLabel("Ok");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjButton3;
   }
/**
 * Return the Button4 property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Button getButton4() {
      if (ivjButton4 == null) {
         try {
            ivjButton4 = new java.awt.Button();
            ivjButton4.setName("Button4");
            ivjButton4.setLabel("Ok");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjButton4;
   }
/**
 * Return the Cancel property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Button getCancel() {
      if (ivjCancel == null) {
         try {
            ivjCancel = new java.awt.Button();
            ivjCancel.setName("Cancel");
            ivjCancel.setLabel("Cancel");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjCancel;
   }
/**
 * Return the Completion1 property value.
 * @return oem.edge.ed.odc.xchannel.Completion
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private Completion getCompletion1() {
      if (ivjCompletion1 == null) {
         try {
            ivjCompletion1 = new oem.edge.ed.odc.xchannel.Completion();
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjCompletion1;
   }
/**
 * Return the ContentsPane property value.
 * @return java.awt.Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Panel getContentsPane() {
      if (ivjContentsPane == null) {
         try {
            ivjContentsPane = new java.awt.Panel();
            ivjContentsPane.setName("ContentsPane");
            ivjContentsPane.setLayout(new java.awt.GridBagLayout());

            java.awt.GridBagConstraints constraintsLabel1 = new java.awt.GridBagConstraints();
            constraintsLabel1.gridx = 1; constraintsLabel1.gridy = 0;
            constraintsLabel1.insets = new java.awt.Insets(4, 4, 4, 4);
            getContentsPane().add(getLabel1(), constraintsLabel1);

            java.awt.GridBagConstraints constraintsEdgeID = new java.awt.GridBagConstraints();
            constraintsEdgeID.gridx = 0; constraintsEdgeID.gridy = 1;
            constraintsEdgeID.insets = new java.awt.Insets(4, 4, 4, 4);
            getContentsPane().add(getEdgeID(), constraintsEdgeID);

            java.awt.GridBagConstraints constraintsTF_EdgeID = new java.awt.GridBagConstraints();
            constraintsTF_EdgeID.gridx = 1; constraintsTF_EdgeID.gridy = 1;
            constraintsTF_EdgeID.fill = java.awt.GridBagConstraints.HORIZONTAL;
            constraintsTF_EdgeID.weightx = 1.0;
            constraintsTF_EdgeID.insets = new java.awt.Insets(4, 4, 4, 70);
            getContentsPane().add(getTF_EdgeID(), constraintsTF_EdgeID);

            java.awt.GridBagConstraints constraintsPassword = new java.awt.GridBagConstraints();
            constraintsPassword.gridx = 0; constraintsPassword.gridy = 2;
            constraintsPassword.insets = new java.awt.Insets(4, 4, 4, 4);
            getContentsPane().add(getPassword(), constraintsPassword);

            java.awt.GridBagConstraints constraintsTF_WBPwd = new java.awt.GridBagConstraints();
            constraintsTF_WBPwd.gridx = 1; constraintsTF_WBPwd.gridy = 2;
            constraintsTF_WBPwd.fill = java.awt.GridBagConstraints.HORIZONTAL;
            constraintsTF_WBPwd.weightx = 1.0;
            constraintsTF_WBPwd.insets = new java.awt.Insets(4, 4, 4, 70);
            getContentsPane().add(getTF_WBPwd(), constraintsTF_WBPwd);

            java.awt.GridBagConstraints constraintsOk = new java.awt.GridBagConstraints();
            constraintsOk.gridx = 0; constraintsOk.gridy = 3;
            constraintsOk.insets = new java.awt.Insets(4, 4, 4, 4);
            getContentsPane().add(getOk(), constraintsOk);

            java.awt.GridBagConstraints constraintsCancel = new java.awt.GridBagConstraints();
            constraintsCancel.gridx = 1; constraintsCancel.gridy = 3;
            constraintsCancel.insets = new java.awt.Insets(4, 4, 4, 4);
            getContentsPane().add(getCancel(), constraintsCancel);
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjContentsPane;
   }
/**
 * Return the ContentsPane2 property value.
 * @return java.awt.Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Panel getContentsPane2() {
      if (ivjContentsPane2 == null) {
         try {
            ivjContentsPane2 = new java.awt.Panel();
            ivjContentsPane2.setName("ContentsPane2");
            ivjContentsPane2.setLayout(new java.awt.GridBagLayout());
            ivjContentsPane2.setBackground(java.awt.SystemColor.window);
            ivjContentsPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

            java.awt.GridBagConstraints constraintsProgressBar1 = new java.awt.GridBagConstraints();
            constraintsProgressBar1.gridx = 0; constraintsProgressBar1.gridy = 1;
            constraintsProgressBar1.fill = java.awt.GridBagConstraints.BOTH;
            constraintsProgressBar1.weightx = 1.0;
            constraintsProgressBar1.weighty = 1.0;
            constraintsProgressBar1.ipadx = 237;
            constraintsProgressBar1.ipady = 41;
            constraintsProgressBar1.insets = new java.awt.Insets(4, 19, 25, 32);
            getContentsPane2().add(getProgressBar1(), constraintsProgressBar1);

            java.awt.GridBagConstraints constraintsstatusText = new java.awt.GridBagConstraints();
            constraintsstatusText.gridx = 0; constraintsstatusText.gridy = 0;
            constraintsstatusText.fill = java.awt.GridBagConstraints.HORIZONTAL;
            constraintsstatusText.anchor = java.awt.GridBagConstraints.WEST;
            constraintsstatusText.weightx = 1.0;
            constraintsstatusText.ipadx = 100;
            constraintsstatusText.ipady = 25;
            constraintsstatusText.insets = new java.awt.Insets(13, 23, 4, 50);
            getContentsPane2().add(getstatusText(), constraintsstatusText);
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjContentsPane2;
   }
/**
 * Return the ContentsPane3 property value.
 * @return java.awt.Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Panel getContentsPane3() {
      if (ivjContentsPane3 == null) {
         try {
            ivjContentsPane3 = new java.awt.Panel();
            ivjContentsPane3.setName("ContentsPane3");
            ivjContentsPane3.setLayout(new java.awt.GridBagLayout());

            java.awt.GridBagConstraints constraintsLabel = new java.awt.GridBagConstraints();
            constraintsLabel.gridx = 0; constraintsLabel.gridy = 0;
            constraintsLabel.gridwidth = 5;
            constraintsLabel.insets = new java.awt.Insets(15, 110, 10, 121);
            getContentsPane3().add(getLabel(), constraintsLabel);

            java.awt.GridBagConstraints constraintsLabel4 = new java.awt.GridBagConstraints();
            constraintsLabel4.gridx = 4; constraintsLabel4.gridy = 1;
            constraintsLabel4.insets = new java.awt.Insets(4, 4, 4, 4);
            getContentsPane3().add(getLabel4(), constraintsLabel4);

            java.awt.GridBagConstraints constraintsButton4 = new java.awt.GridBagConstraints();
            constraintsButton4.gridx = 4; constraintsButton4.gridy = 2;
            constraintsButton4.insets = new java.awt.Insets(4, 4, 20, 4);
            getContentsPane3().add(getButton4(), constraintsButton4);
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjContentsPane3;
   }
/**
 * Return the ContentsPane4 property value.
 * @return java.awt.Panel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Panel getContentsPane4() {
      if (ivjContentsPane4 == null) {
         try {
            ivjContentsPane4 = new java.awt.Panel();
            ivjContentsPane4.setName("ContentsPane4");
            ivjContentsPane4.setLayout(new java.awt.GridBagLayout());

            java.awt.GridBagConstraints constraintsLabel7 = new java.awt.GridBagConstraints();
            constraintsLabel7.gridx = 0; constraintsLabel7.gridy = 0;
            getContentsPane4().add(getLabel7(), constraintsLabel7);

            java.awt.GridBagConstraints constraintsLabel8 = new java.awt.GridBagConstraints();
            constraintsLabel8.gridx = 0; constraintsLabel8.gridy = 1;
            constraintsLabel8.anchor = java.awt.GridBagConstraints.WEST;
            getContentsPane4().add(getLabel8(), constraintsLabel8);

            java.awt.GridBagConstraints constraintsButton3 = new java.awt.GridBagConstraints();
            constraintsButton3.gridx = 0; constraintsButton3.gridy = 2;
            constraintsButton3.insets = new java.awt.Insets(4, 4, 4, 4);
            getContentsPane4().add(getButton3(), constraintsButton3);
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjContentsPane4;
   }
/**
 * Return the EdgeID property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Label getEdgeID() {
      if (ivjEdgeID == null) {
         try {
            ivjEdgeID = new java.awt.Label();
            ivjEdgeID.setName("EdgeID");
            ivjEdgeID.setText("EdgeID :");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjEdgeID;
   }
/**
 * Return the ErrorDialog property value.
 * @return java.awt.Dialog
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Dialog getErrorDialog() {
      if (ivjErrorDialog == null) {
         try {
            ivjErrorDialog = new java.awt.Dialog(this);
            ivjErrorDialog.setName("ErrorDialog");
            ivjErrorDialog.setLayout(new java.awt.BorderLayout());
            ivjErrorDialog.setBounds(436, 423, 517, 161);
            ivjErrorDialog.setTitle("Error");
            getErrorDialog().add(getContentsPane3(), "Center");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjErrorDialog;
   }
/**
 * Return the Label property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Label getLabel() {
      if (ivjLabel == null) {
         try {
            ivjLabel = new java.awt.Label();
            ivjLabel.setName("Label");
            ivjLabel.setText("Unable to authenticate! ");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjLabel;
   }
/**
 * Return the Label1 property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Label getLabel1() {
      if (ivjLabel1 == null) {
         try {
            ivjLabel1 = new java.awt.Label();
            ivjLabel1.setName("Label1");
            ivjLabel1.setText("Login required to create X Channel");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjLabel1;
   }
/**
 * Return the Label4 property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Label getLabel4() {
      if (ivjLabel4 == null) {
         try {
            ivjLabel4 = new java.awt.Label();
            ivjLabel4.setName("Label4");
            ivjLabel4.setText("Please check if \"Create-X Channel\" menu item was pushed on the CSDS");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjLabel4;
   }
/**
 * Return the Label7 property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Label getLabel7() {
      if (ivjLabel7 == null) {
         try {
            ivjLabel7 = new java.awt.Label();
            ivjLabel7.setName("Label7");
            ivjLabel7.setText("X-Channel Service was started on the client side");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjLabel7;
   }
/**
 * Return the Label8 property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Label getLabel8() {
      if (ivjLabel8 == null) {
         try {
            ivjLabel8 = new java.awt.Label();
            ivjLabel8.setName("Label8");
            ivjLabel8.setText("Please check CSDS for port information");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjLabel8;
   }
/**
 * Return the Button1 property value.
 * @return java.awt.Button
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Button getOk() {
      if (ivjOk == null) {
         try {
            ivjOk = new java.awt.Button();
            ivjOk.setName("Ok");
            ivjOk.setEnabled(false);
            ivjOk.setLabel("Connect");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjOk;
   }
/**
 * Return the Password property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Label getPassword() {
      if (ivjPassword == null) {
         try {
            ivjPassword = new java.awt.Label();
            ivjPassword.setName("Password");
            ivjPassword.setText("Password:");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjPassword;
   }
/**
 * Return the ProgressBar1 property value.
 * @return oem.edge.ed.sd.ProgressBar
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private oem.edge.ed.sd.ProgressBar getProgressBar1() {
      if (ivjProgressBar1 == null) {
         try {
            ivjProgressBar1 = new oem.edge.ed.sd.ProgressBar();
            ivjProgressBar1.setName("ProgressBar1");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjProgressBar1;
   }
/**
 * Insert the method's description here.
 * Creation date: (10/3/2003 1:09:43 PM)
 */
   public ServerSocket getSkt() {
      return skt;
   }
/**
 * Return the Dialog1 property value.
 * @return java.awt.Dialog
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Dialog getStatusDialog() {
      if (ivjStatusDialog == null) {
         try {
            ivjStatusDialog = new java.awt.Dialog(this);
            ivjStatusDialog.setName("StatusDialog");
            ivjStatusDialog.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
            ivjStatusDialog.setLayout(new java.awt.BorderLayout());
            ivjStatusDialog.setBounds(570, 198, 402, 145);
            ivjStatusDialog.setTitle("Connecting...");
            getStatusDialog().add(getContentsPane2(), "Center");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjStatusDialog;
   }
/**
 * Return the statusText property value.
 * @return java.awt.Label
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Label getstatusText() {
      if (ivjstatusText == null) {
         try {
            ivjstatusText = new java.awt.Label();
            ivjstatusText.setName("statusText");
            ivjstatusText.setText("Connecting...");
            ivjstatusText.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjstatusText;
   }
/**
 * Return the Dialog1 property value.
 * @return java.awt.Dialog
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.Dialog getSuccessDialog() {
      if (ivjSuccessDialog == null) {
         try {
            ivjSuccessDialog = new java.awt.Dialog(this);
            ivjSuccessDialog.setName("SuccessDialog");
            ivjSuccessDialog.setLayout(new java.awt.BorderLayout());
            ivjSuccessDialog.setBounds(523, 40, 360, 122);
            ivjSuccessDialog.setTitle("X Channel Service Created");
            getSuccessDialog().add(getContentsPane4(), "North");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjSuccessDialog;
   }
/**
 * Return the TF_EdgeID property value.
 * @return java.awt.TextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.TextField getTF_EdgeID() {
      if (ivjTF_EdgeID == null) {
         try {
            ivjTF_EdgeID = new java.awt.TextField();
            ivjTF_EdgeID.setName("TF_EdgeID");
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjTF_EdgeID;
   }
/**
 * Return the TextField2 property value.
 * @return java.awt.TextField
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private java.awt.TextField getTF_WBPwd() {
      if (ivjTF_WBPwd == null) {
         try {
            ivjTF_WBPwd = new java.awt.TextField();
            ivjTF_WBPwd.setName("TF_WBPwd");
            ivjTF_WBPwd.setEchoChar('*');
           // user code begin {1}
           // user code end
         } catch (java.lang.Throwable ivjExc) {
           // user code begin {2}
           // user code end
            handleException(ivjExc);
         }
      }
      return ivjTF_WBPwd;
   }
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
   private void handleException(java.lang.Throwable exception) {

     /* Uncomment the following lines to print uncaught exceptions to stdout */
      System.out.println("--------- UNCAUGHT EXCEPTION ---------");
      exception.printStackTrace(System.out);
   }
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void initConnections() throws java.lang.Exception {
     // user code begin {1}
     // user code end
      this.addWindowListener(ivjEventHandler);
      getButton3().addActionListener(ivjEventHandler);
      getButton4().addActionListener(ivjEventHandler);
      getTF_EdgeID().addTextListener(ivjEventHandler);
      getTF_WBPwd().addTextListener(ivjEventHandler);
      getTF_EdgeID().addActionListener(ivjEventHandler);
      getOk().addActionListener(ivjEventHandler);
      getCancel().addActionListener(ivjEventHandler);
      getCompletion1().addPropertyChangeListener(ivjEventHandler);
      connPtoP2SetTarget();
      connPtoP1SetTarget();
   }
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
   private void initialize() {
      try {
        // user code begin {1}
        // user code end
         setName("WhiteBoard");
         setLayout(new java.awt.BorderLayout());
         setSize(334, 204);
         setTitle("Create X Channel ");
         add(getContentsPane(), "Center");
         initConnections();
      } catch (java.lang.Throwable ivjExc) {
         handleException(ivjExc);
      }
     // user code begin {2}
     // user code end
   }
/**
 * Insert the method's description here.
 * Creation date: (10/3/2003 4:28:34 PM)
 */
   public void kickXProxy() {
     // Kick XProxy here
      if ( skt == null)
         System.out.println("kickXProxy:" + " skt is null");
      xp.setCookie(this.chocolateChipCookie);
      xp.setDisplay(this.display);
      xp.setPortToConnect(this.proxyToConnectTo_Port);
      xp.setPassPhrase(PassPhrase);
      xp.begin(skt);
			
			
//			xp.beginSrvSocket(skt);
   }
/**
 * Starts the application.
 * @param args an array of command-line arguments
 */
   public static void main(java.lang.String[] args) {
      try {
		
        /* Create the frame */
         XChannel aXChannel = new XChannel();

         
         skt = (ServerSocket)xp.createServerSocket();
         int port;
         if( (port = xp.getProxyPort()) == -1){
           //NEED TO PRINT A MESSAGE HERE
            System.out.println("\n\n\t NO PORT AVAILABLE TO START"
                               +	" THE SSL SERVER SOCKET\n\n");
            return;
         }
        // parsing args[0] and just retrieving the host name
         String hName					= args[0].substring(0,args[0].indexOf(":"));
         String pPort	= args[0].substring(args[0].indexOf(":") + 1);
         aXChannel.display              = hName + ":" + port ;//"comserv509.fishkill.ibm.com:3000";//hName//args[0]
         aXChannel.chocolateChipCookie  = args[1];
         aXChannel.proxyToConnectTo_Port = pPort ;
                
        // https:://mach/cc
         if (args.length > 2) aXChannel.connaddress = args[2];

         if (args.length > 3 && args[3].equals("-force")) aXChannel.forcereplace = true;
         
        /* Calculate the screen size */
         Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        /* Pack frame on the screen */
         aXChannel.pack();

        /* Center frame on the screen */
         Dimension frameSize = aXChannel.getSize();
         if (frameSize.height > screenSize.height)
            frameSize.height = screenSize.height;
         if (frameSize.width > screenSize.width)
            frameSize.width = screenSize.width;
         aXChannel.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);

        /* Add a windowListener for the windowClosedEvent */
         aXChannel.addWindowListener(new java.awt.event.WindowAdapter() {
               public void windowClosed(java.awt.event.WindowEvent e) {
                  System.exit(0);
               };
            });
         aXChannel.setVisible(true);
      } catch (Throwable exception) {
         System.err.println("Exception occurred in main() of XChannel");
         exception.printStackTrace(System.out);
      }
   }
/**
 * Comment
 */
   public void oK_ActionPerformed(java.awt.event.ActionEvent actionEvent) {
      System.out.println("ayyo");
   }
/**
 * Comment
 */
   public void oK_ActionPerformed1(java.awt.event.ActionEvent actionEvent) {
      System.out.println("hello");
      return;
   }
/**
 * Insert the method's description here.
 * Creation date: (7/22/2003 2:16:38 PM)
 */
   public void run() {
      begin();
   }
/**
 * Insert the method's description here.
 * Creation date: (10/3/2003 1:09:43 PM)
 */
   public void setSkt(ServerSocket newSkt) {
      skt = newSkt;
   }
/**
 * Insert the method's description here.
 * Creation date: (7/22/2003 8:51:44 PM)
 */
   public void showErrorDialog() {
		
      java.awt.Dialog dlg = getErrorDialog();
      dlg.setVisible(true);
		
     /* Calculate the screen size */
      Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

     /* Pack frame on the screen */
//		dlg.pack();

     /* Center frame on the screen */
      Dimension frameSize = dlg.getSize();
      if (frameSize.height > screenSize.height)
         frameSize.height = screenSize.height;
      if (frameSize.width > screenSize.width)
         frameSize.width = screenSize.width;
      dlg.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
      dlg.show();
      return;
   }
/**
 * Comment
 */
   public void ShowLoginWindow(java.awt.event.ActionEvent actionEvent) {
      XChannel aXChannel =new XChannel();
     /* Calculate the screen size */
      Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

     /* Pack frame on the screen */
      aXChannel.pack();

     /* Center frame on the screen */
      Dimension frameSize = aXChannel.getSize();
      if (frameSize.height > screenSize.height)
         frameSize.height = screenSize.height;
      if (frameSize.width > screenSize.width)
         frameSize.width = screenSize.width;
      aXChannel.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
      aXChannel.show();
      return;
   }
/**
 * Insert the method's description here.
 * Creation date: (7/22/2003 9:02:45 PM)
 */
   public void showStatusDialog() {
      java.awt.Dialog dlg = getStatusDialog();
      dlg.setVisible(true);
		
      Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

     /* Center frame on the screen */
      Dimension frameSize = dlg.getSize();
      if (frameSize.height > screenSize.height)
         frameSize.height = screenSize.height;
      if (frameSize.width > screenSize.width)
         frameSize.width = screenSize.width;
      dlg.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
      dlg.show();
      return;
   }
/**
 * Insert the method's description here.
 * Creation date: (7/23/2003 1:03:53 PM)
 */
   public void showSuccessDialog() {
      java.awt.Dialog dlg = getSuccessDialog();
      dlg.setVisible(true);
		
     /* Calculate the screen size */
      Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

     /* Pack frame on the screen */
      dlg.pack();

     /* Center frame on the screen */
      Dimension frameSize = dlg.getSize();
      if (frameSize.height > screenSize.height)
         frameSize.height = screenSize.height;
      if (frameSize.width > screenSize.width)
         frameSize.width = screenSize.width;
      dlg.setLocation((screenSize.width - frameSize.width) / 2, (screenSize.height - frameSize.height) / 2);
      dlg.show();
      return;
	
   }
/**
 * Insert the method's description here.
 * Creation date: (7/22/2003 2:17:51 PM)
 */
   public void startThreads() {

      getOk().setEnabled(false);
      showStatusDialog();
	
//	getProgressBar1().repaint();
      getCompletion1().setCompleted(false);
      getCompletion1().processProgress();
      Thread t = new Thread(this);
      t.start();
	
   }
}
