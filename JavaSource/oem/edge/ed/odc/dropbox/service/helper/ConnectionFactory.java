package oem.edge.ed.odc.dropbox.service.helper;

import java.net.URL;
import java.util.HashMap;

import java.net.MalformedURLException;
import java.rmi.RemoteException;
import oem.edge.ed.odc.dsmp.common.DboxException;
import oem.edge.ed.odc.dropbox.service.DropboxAccess;

/*  ------------------------------------------------------------------   */ 
/*                       Copyright Header Check                          */
/*  ------------------------------------------------------------------   */ 
/*                                                                       */ 
/*   OCO Source Materials                                                */ 
/*                                                                       */ 
/*   Product(s): PROFIT                        		                 */ 
/*                                                                       */ 
/*   (C)Copyright IBM Corp. 2006                                         */ 
/*                                                                       */ 
/*     All Rights Reserved                                               */ 
/*     US Government Users Restricted Rights                             */ 
/*                                                                       */ 
/*   The source code for this program is not published or otherwise      */ 
/*   divested of its trade secrets, irrespective of what has been        */ 
/*   deposited with the US Copyright Office.                             */ 
/*   ------------------------------------------------------------------  */
/*     Please do not remove any of these commented lines  21 lines       */
/*   ------------------------------------------------------------------  */
/*                       Copyright Footer Check                          */
/*   ------------------------------------------------------------------  */ 

/**
 * Provides the interface used by all factories which can generate 
 * a proxy to remotely access the Dropbox web service
 */
public interface ConnectionFactory {

  /**
   * Returns a descriptive name for proxy type
   * @return Returns Logical name for access method supported by factory
   */
   public String getName();

  /**
   * Sets the full URL to be used to access the remote service
   *
   * @param url Fully formed URL to access remote service
   * @return void
   * @throws  MalformedURLException - if URL is not valid
   */
   public void setURL(URL url)  throws MalformedURLException;
   
  /**
   * Sets the <i>front matter</i> portion of the URL used to access the
   *  remote service. For example, if the supported transport is http, 
   *  the topURL would be something like: 
   * <p>
   * &nbsp;&nbsp;&nbsp;https://machine.domain.com/context
   * @param  url  Specified the context portion of the URL
   * @return void
   * @throws  MalformedURLException - if URL is not valid
   */
   public void setTopURL(URL url)  throws MalformedURLException;
   
  /**
   * Sets the <i>tail matter</i> portion (uri) to be joined with the topURL to produce
   *  the actual URL used to access the remote service.
   *  the URI would be something like: 
   * <p>
   * &nbsp;&nbsp;&nbsp;DboxService
   * @param  s String value of the uri to use
   * @return void
   */
   public void setURI(String s);
   
  /**
   * Retrieves the currently set topURL value. 
   *
   * @return String currently set topURL (may be null)
   */
   public String getTopURL();
   
  /**
   * Retrieves the currently set URI value
   *
   * @return String currently set URI value (may be null)
   */
   public String getURI();
   
  /**
   * Creates a new DropboxAccess proxy to access the remote service using the URL 
   *  provided via the setURL method, or, if null, the combination of the topURL 
   *  and the URL.
   *
   * @return DropboxAccess proxy allowing access to remote service
   */
   public DropboxAccess getProxy() throws DboxException, RemoteException;
   
  /**
   * Set the SessionID info for the proxy specified proxy. The intent is that the 
   *  client will create
   *  a dropbox session via the DropboxAccess.createSession method, and then register
   *  that sessionid via this method. Each call made using the proxy will have this
   *  registered sessionid information carried along to prove the callers identity 
   *  as well as affiliation with a particiular session.
   *
   * @see SessionHelper  class for more information
   * @param  proxy       DropboxAccess proxy for which the sessionid is being registered
   * @return sessionMap  map obtained via createSession or refreshSession call
   */
   public void setSessionId(DropboxAccess proxy, HashMap sessionMap)
      throws DboxException, RemoteException;
      
  /**
   * Returns the registered sessionid for the specified Proxy. Note, the provided
   *  proxy reference must have been generated by this factory or null will be returned
   *
   * @param  proxy   DropboxAccess proxy for which we are searching for sessionid value
   * @return String  Registered sessionid
   */
   public String getSessionId(DropboxAccess proxy);
}
