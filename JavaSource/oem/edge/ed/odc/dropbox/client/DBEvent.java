package oem.edge.ed.odc.dropbox.client;

import java.util.Hashtable;
import java.util.Vector;

import oem.edge.ed.odc.dropbox.common.FileInfo;
import oem.edge.ed.odc.dropbox.common.PackageInfo;
import oem.edge.ed.odc.dropbox.common.PoolInfo;
import oem.edge.ed.odc.ftp.client.FTPEvent;
/*                       Copyright Header Check                             */
/*   --------------------------------------------------------------------   */
/*                                                                          */
/*     OCO Source Materials                                                 */
/*                                                                          */
/*     Product(s): PROFIT                                                   */
/*                                                                          */
/*     (C)Copyright IBM Corp. 2003-2004                                     */
/*                                                                          */
/*     All Rights Reserved                                                  */
/*     US Government Users Restricted Rigts                                 */
/*                                                                          */
/*     The source code for this program is not published or otherwise       */
/*     divested of its trade secrets, irrespective of what has been         */
/*     deposited with the US Copyright Office.                              */
/*                                                                          */
/*   --------------------------------------------------------------------   */
/*     Please do not remove any of these commented lines  20 lines          */
/*   --------------------------------------------------------------------   */
/*                       Copyright Footer Check                             */

/**
 * An dropbox event generated by a DBDispatcher in response to protocol received
 * from the dropbox server. See the is*() methods for definition of valid properties
 * set for specific event types.
 *
 * @version 1.0.0.0 02/21/2003
 * @author Mike Zarnick
 */
public class DBEvent extends FTPEvent {
	/**
	 * Constant used to indicate <i>add item to package</i> request succeeded.
	 * @see #isAddItem()
	 * @see #reason
	 */
	static public int ADDITEM = 100;
	/**
	 * Constant used to indicate <i>add item to package</i> request failed.
	 * @see #isAddItemFailed()
	 * @see #reason
	 */
	static public int ADDITEM_FAILED = 101;
	/**
	 * Constant used to indicate <i>add package acl</i> request succeeded.
	 * @see #isAddPkgAcl()
	 * @see #reason
	 */
	static public int ADDACL = 102;
	/**
	 * Constant used to indicate <i>add package acl</i> request failed.
	 * @see #isAddPkgAclFailed()
	 * @see #reason
	 */
	static public int ADDACL_FAILED = 103;
	/**
	 * Constant used to indicate <i>commit package</i> request succeeded.
	 * @see #isCommit()
	 * @see #reason
	 */
	static public int COMMIT = 104;
	/**
	 * Constant used to indicate <i>commit package</i> request failed.
	 * @see #isCommitFailed()
	 * @see #reason
	 */
	static public int COMMIT_FAILED = 105;
	/**
	 * Constant used to indicate <i>create package</i> request succeeded.
	 * @see #isCreated()
	 * @see #reason
	 */
	static public int CREATE = 106;
	/**
	 * Constant used to indicate <i>create package</i> request failed.
	 * @see #isCreatedFailed()
	 * @see #reason
	 */
	static public int CREATE_FAILED = 107;
	/**
	 * Constant used to indicate <i>query file</i> request succeeded.
	 * @see #isQueryFile()
	 * @see #reason
	 */
	static public int QUERYFILE = 108;
	/**
	 * Constant used to indicate <i>query file</i> request failed.
	 * @see #isQueryFileFailed()
	 * @see #reason
	 */
	static public int QUERYFILE_FAILED = 109;
	/**
	 * Constant used to indicate <i>query files</i> request succeeded.
	 * @see #isQueryFiles()
	 * @see #reason
	 */
	static public int QUERYFILES = 110;
	/**
	 * Constant used to indicate <i>query files</i> request failed.
	 * @see #isQueryFilesFailed()
	 * @see #reason
	 */
	static public int QUERYFILES_FAILED = 111;
	/**
	 * Constant used to indicate <i>query package acls</i> request succeeded.
	 * @see #isAddItem()
	 * @see #reason
	 */
	static public int QUERYPKGACLS = 112;
	/**
	 * Constant used to indicate <i>query package acls</i> request failed.
	 * @see #isAddItem()
	 * @see #reason
	 */
	static public int QUERYPKGACLS_FAILED = 113;
	/**
	 * Constant used to indicate <i>query package contents</i> request succeeded.
	 * @see #isQueryPackageContents()
	 * @see #reason
	 */
	static public int QUERYCONTENTS = 114;
	/**
	 * Constant used to indicate <i>query package contents</i> request failed.
	 * @see #isQueryPackageContents()
	 * @see #reason
	 */
	static public int QUERYCONTENTS_FAILED = 115;
	/**
	 * Constant used to indicate <i>query package file acls</i> request succeeded.
	 * @see #isQueryPackageFileAcls()
	 * @see #reason
	 */
	static public int QUERYFILEACLS = 116;
	/**
	 * Constant used to indicate <i>query package file acls</i> request failed.
	 * @see #isQueryPackageFileAclsFailed()
	 * @see #reason
	 */
	static public int QUERYFILEACLS_FAILED = 117;
	/**
	 * Constant used to indicate <i>query package</i> request succeeded.
	 * @see #isQueryPackage()
	 * @see #reason
	 */
	static public int QUERYPKG = 118;
	/**
	 * Constant used to indicate <i>query package</i> request failed.
	 * @see #isQueryPackageFailed()
	 * @see #reason
	 */
	static public int QUERYPKG_FAILED = 119;
	/**
	 * Constant used to indicate <i>query packages</i> request succeeded.
	 * @see #isQueryPackages()
	 * @see #reason
	 */
	static public int QUERYPKGS = 120;
	/**
	 * Constant used to indicate <i>query packages</i> request failed.
	 * @see #isQueryPackagesFailed()
	 * @see #reason
	 */
	static public int QUERYPKGS_FAILED = 121;
	/**
	 * Constant used to indicate <i>remove item from package</i> request succeeded.
	 * @see #isRemoveItem()
	 * @see #reason
	 */
	static public int REMOVEITEM = 122;
	/**
	 * Constant used to indicate <i>remove item from package</i> request failed.
	 * @see #isRemoveItemFailed()
	 * @see #reason
	 */
	static public int REMOVEITEM_FAILED = 123;
	/**
	 * Constant used to indicate <i>remove package acl</i> request succeeded.
	 * @see #isRemovePkgAcl()
	 * @see #reason
	 */
	static public int REMOVEACL = 124;
	/**
	 * Constant used to indicate <i>remove package acl</i> request failed.
	 * @see #isRemovePkgAclFailed()
	 * @see #reason
	 */
	static public int REMOVEACL_FAILED = 125;
	/**
	 * Constant used to indicate <i>get projects</i> request succeeded.
	 * @see #isGetProjects()
	 * @see #reason
	 */
	static public int GETPROJECTS = 126;
	/**
	 * Constant used to indicate <i>get projects</i> request failed.
	 * @see #isGetProjectsFailed()
	 * @see #reason
	 */
	static public int GETPROJECTS_FAILED = 127;
	/**
	 * Constant used to indicate <i>change package expiration</i> request succeeded.
	 * @see #isChangeExpiration()
	 * @see #reason
	 */
	static public int CHANGEEXPIRATION = 128;
	/**
	 * Constant used to indicate <i>change package expiration</i> request failed.
	 * @see #isChangeExpirationFailed()
	 * @see #reason
	 */
	static public int CHANGEEXPIRATION_FAILED = 129;
	/**
	 * Constant used to indicate <i>mark package read</i> request succeeded.
	 * @see #isMarkPackage()
	 * @see #reason
	 */
	static public int MARKPACKAGE = 130;
	/**
	 * Constant used to indicate <i>mark package read</i> request failed.
	 * @see #isMarkPackageFailed()
	 * @see #reason
	 */
	static public int MARKPACKAGE_FAILED = 131;
	/**
	 * Constant used to indicate <i>create group</i> request succeeded.
	 * @see #isCreatedGroup()
	 * @see #reason
	 */
	static public int CREATEGROUP = 132;
	/**
	 * Constant used to indicate <i>create group</i> request failed.
	 * @see #isCreatedGroupFailed()
	 * @see #reason
	 */
	static public int CREATEGROUP_FAILED = 133;
	/**
	 * Constant used to indicate <i>delete group</i> request succeeded.
	 * @see #isDeleteGroup()
	 * @see #reason
	 */
	static public int DELETEGROUP = 134;
	/**
	 * Constant used to indicate <i>delete group</i> request failed.
	 * @see #isDeleteGroupFailed()
	 * @see #reason
	 */
	static public int DELETEGROUP_FAILED = 135;
	/**
	 * Constant used to indicate <i>modify group acl</i> request succeeded.
	 * @see #isModifyGroupAcl()
	 * @see #reason
	 */
	static public int MODIFYGROUPACL = 136;
	/**
	 * Constant used to indicate <i>modify group acl</i> request failed.
	 * @see #isModifyGroupAclFailed()
	 * @see #reason
	 */
	static public int MODIFYGROUPACL_FAILED = 137;
	/**
	 * Constant used to indicate <i>modify group attribute</i> request succeeded.
	 * @see #isModifyGroupAttr()
	 * @see #reason
	 */
	static public int MODIFYGROUPATTR = 138;
	/**
	 * Constant used to indicate <i>modify group attribute</i> request failed.
	 * @see #isModifyGroupAttrFailed()
	 * @see #reason
	 */
	static public int MODIFYGROUPATTR_FAILED = 139;
	/**
	 * Constant used to indicate <i>negotiate protocol version</i> request succeeded.
	 * @see #isNegotiateProtocolVersion()
	 * @see #reason
	 */
	static public int NEGOTIATEPROTOCOL = 140;
	/**
	 * Constant used to indicate <i>negotiate protocol version</i> request failed.
	 * @see #isNegotiateProtocolVersionFailed()
	 * @see #reason
	 */
	static public int NEGOTIATEPROTOCOL_FAILED = 141;
	/**
	 * Constant used to indicate <i>query groups</i> request succeeded.
	 * @see #isQueryGroups()
	 * @see #reason
	 */
	static public int QUERYGROUPS = 142;
	/**
	 * Constant used to indicate <i>query groups</i> request failed.
	 * @see #isQueryGroupsFailed()
	 * @see #reason
	 */
	static public int QUERYGROUPS_FAILED = 143;
	/**
	 * Constant used to indicate <i>manage options</i> request succeeded.
	 * @see #isManageOptions()
	 * @see #reason
	 */
	static public int MANAGEOPTIONS = 144;
	/**
	 * Constant used to indicate <i>manage options</i> request failed.
	 * @see #isManageOptionsFailed()
	 * @see #reason
	 */
	static public int MANAGEOPTIONS_FAILED = 145;
	/**
	 * Constant used to indicate <i>set package option</i> request succeeded.
	 * @see #isSetPackageOptions()
	 * @see #reason
	 */
	static public int SETPKGOPTION = 146;
	/**
	 * Constant used to indicate <i>set package option</i> request failed.
	 * @see #isSetPackageOptionsFailed()
	 * @see #reason
	 */
	static public int SETPKGOPTION_FAILED = 147;
	/**
	 * Constant used to indicate <i>query storage pool</i> request succeeded.
	 * @see #isQueryStoragePool()
	 * @see #reason
	 */
	static public int QUERYSTORAGEPOOL = 148;
	/**
	 * Constant used to indicate <i>query storage pool</i> request failed.
	 * @see #isQueryStoragePoolFailed()
	 * @see #reason
	 */
	static public int QUERYSTORAGEPOOL_FAILED = 149;
	/**
	 * Constant used to indicate <i>query storage pools</i> request succeeded.
	 * @see #isQueryStoragePools()
	 * @see #reason
	 */
	static public int QUERYSTORAGEPOOLS = 150;
	/**
	 * Constant used to indicate <i>query storage pools</i> request failed.
	 * @see #isQueryStoragePoolsFailed()
	 * @see #reason
	 */
	static public int QUERYSTORAGEPOOLS_FAILED = 151;

	/**
	 * A long identifier. Not always valid, see various is*() methods to determine
	 * if property is set and to determine its specific meaning.
	 **/
	public long lID;
	/**
	 * Package expiration date in ms since 1/1/1970. Not always valid, see various is*()
	 * methods to determine if property is set.
	 **/
	public long pkgExpire;
	/**
	 * Package size in bytes. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public long pkgSize;
	/**
	 * PackageInfo object. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public PackageInfo pkgInfo;
	/**
	 * True if package or file information is owned by calling user. Not always valid, see
	 * various is*() methods to determine if property is set.
	 **/
	public boolean ownerAccessor;
	/**
	 * True if package acl information represents the original recipient list. Not always valid, see
	 * various is*() methods to determine if property is set.
	 **/
	public boolean staticOnly;
	/**
	 * True if GroupInfo objects in the vector contain member lists. Not always valid, see
	 * various is*() methods to determine if property is set.
	 **/
	public boolean includesMembers;
	/**
	 * True if GroupInfo objects in the vector contain access lists. Not always valid, see
	 * various is*() methods to determine if property is set.
	 **/
	public boolean includesAccess;
	/**
	 * User name. Not always valid, see various is*() methods to determine if property is set.
	 **/
	public String user;
	/**
	 * Company name. Not always valid, see various is*() methods to determine if property is set.
	 **/
	public String company;
	/**
	 * Vector containing additional data. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public Vector vectorData;
	/**
	 * Hashtable containing additional data. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public Hashtable hashData;
	/**
	 * FileInfo containing information about a file. Not always valid, see various is*() methods
	 * to determine if property is set.
	 **/
	public FileInfo fileInfo;
	/**
	 * PoolInfo object. Not always valid, see various is*() methods to determine
	 * if property is set.
	 **/
	public PoolInfo poolInfo;

	/**
	 * DBEvent constructor for basic events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle) {
		super(reason, flags, handle);
	}
	/**
	 * DBEvent constructor for dropbox abort download events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as an DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param id int
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #id
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, int id) {
		super(reason, flags, handle, id);
	}
	/**
	 * DBEvent constructor for dropbox upload reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as an DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param id int
	 * @param fileofs long
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #id
	 * @see #fileofs
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, int id, long fileofs) {
		super(reason, flags, handle, id, fileofs);
	}
	/**
	 * DBEvent constructor for dropbox download data events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as an DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param id int
	 * @param fileofs long
	 * @param buffer byte[]
	 * @param bufofs int
	 * @param buflen int
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #id
	 * @see #fileofs
	 * @see #filedata
	 * @see #filedataofs
	 * @see #filedatalen
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, int id, long fileofs, byte[] buffer, int bufofs, int buflen) {
		super(reason, flags, handle, id, fileofs, buffer, bufofs, buflen);
	}
	/**
	 * DBEvent constructor for dropbox download reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as an DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param id int
	 * @param fileofs long
	 * @param filelen long
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #id
	 * @see #fileofs
	 * @see #filelen
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, int id, long fileofs, long filesz) {
		super(reason, flags, handle, id, fileofs, filesz);
	}
	/**
	 * DBEvent constructor for dropbox download aborted events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as an DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param id int
	 * @param msg String
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #id
	 * @see #message
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, int id, String msg) {
		super(reason, flags, handle, id, msg);
	}
	/**
	 * DBEvent constructor for dropbox login events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as an DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param id int
	 * @param area String
	 * @param separator String
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #id
	 * @see #area
	 * @see #separator
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, int loginID, String area, String separator) {
		super(reason, flags, handle, loginID, area, separator);
	}
	/**
	 * DBEvent constructor for dropbox create package reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param id long
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #lID
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, long id) {
		super(reason, flags, handle);
		this.lID = id;
	}
	/**
	 * DBEvent constructor for dropbox upload reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as an DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param id int
	 * @param fileofs long
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #id
	 * @see #fileofs
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, long itemid, int id, long fileofs) {
		super(reason, flags, handle, id, fileofs);
		this.lID = itemid;
	}
	/**
	 * DBEvent constructor for dropbox query package contents reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param pID long
	 * @param v Vector
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #vectorData
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, long pID, Vector v) {
		super(reason, flags, handle);
		this.lID = pID;
		this.vectorData = v;
	}
	/**
	 * DBEvent constructor for dropbox error events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param message String
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #message
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, String message) {
		super(reason, flags, handle, message);
	}
	/**
	 * DBEvent constructor for get projects reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param user String
	 * @param company String
	 * @param v Vector
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #user
	 * @see #company
	 * @see #vectorData
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, String user, String company, Vector v) {
		super(reason, flags, handle);
		this.vectorData = v;
		this.user = user;
		this.company = company;
	}
	/**
	 * DBEvent constructor for dropbox get options events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param h Hashtable
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #hashData
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, Hashtable h) {
		super(reason, flags, handle);
		this.hashData = h;
	}
	/**
	 * DBEvent constructor for dropbox query package file acls, query package acls and query storage pools events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param v Vector
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #vectorData
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, Vector v) {
		super(reason, flags, handle);
		this.vectorData = v;
	}
	/**
	 * DBEvent constructor for dropbox query package acls reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param v Vector
	 * @param staticOnly boolean
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #vectorData
	 * @see #staticOnly
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, Vector v, boolean staticOnly) {
		super(reason, flags, handle);
		this.vectorData = v;
		this.staticOnly = staticOnly;
	}
	/**
	 * DBEvent constructor for dropbox query file reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param info FileInfo
	 * @param vecData Vector
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #fileInfo
	 * @see #vectorData
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, FileInfo info, Vector vecData) {
		super(reason, flags, handle);
		this.fileInfo = info;
		this.vectorData = vecData;
	}
	/**
	 * DBEvent constructor for dropbox query package reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param pi PackageInfo
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #pkgInfo
	 * @see #PackageInfo
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, PackageInfo pi) {
		super(reason, flags, handle);
		this.pkgInfo = pi;
	}
	/**
	 * DBEvent constructor for dropbox get storage pool info reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param pi PoolInfo
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #poolInfo
	 * @see #PoolInfo
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, PoolInfo pi) {
		super(reason, flags, handle);
		this.poolInfo = pi;
	}
	/**
	 * DBEvent constructor for dropbox query files & query packages reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param owner boolean
	 * @param v Vector
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #ownerAccessor
	 * @see #vectorData
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, boolean ownerAccessor, Vector v) {
		super(reason, flags, handle);
		this.ownerAccessor = ownerAccessor;
		this.vectorData = v;
	}
	/**
	 * DBEvent constructor for dropbox query groups reply events.
	 * <p>This constructor is not normally called directly. Those interested in receiving these events
	 * should register as a DBEventListener with DBDispatcher instead.</p>
	 * @param reason int
	 * @param flags byte
	 * @param handle byte
	 * @param includesMembers boolean
	 * @param includesAccess boolean
	 * @param v Vector
	 *
	 * @see #reason
	 * @see #flags
	 * @see #handle
	 * @see #includesMembers
	 * @see #includesAccess
	 * @see #vectorData
	 * @see #DBDispatcher.addDBListener()
	 */
	public DBEvent(int reason, byte flags, byte handle, boolean includesMembers, boolean includesAccess, Vector v) {
		super(reason, flags, handle);
		this.includesMembers = includesMembers;
		this.includesAccess = includesAccess;
		this.vectorData = v;
	}
	/**
	 * Identifies a server response to an <i>add item to package</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #DropboxGenerator
	 * @return true if this event represents a server response for an <i>add item to package</i> 
	 *              request which was processed without error
	 */
	public boolean isAddItem() {
		return reason == ADDITEM;
	}
	/**
	 * Identifies a server response to an <i>add item to package</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for an <i>add item to package</i> 
	 *              request which encountered an error
	 */
	public boolean isAddItemFailed() {
		return reason == ADDITEM_FAILED;
	}
	/**
	 * Identifies a server response to an <i>add package acl</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for an <i>add package acl</i> 
	 *              request which was processed without error
	 */
	public boolean isAddPkgAcl() {
		return reason == ADDACL;
	}
	/**
	 * Identifies a server response to an <i>add package acl</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for an <i>add package acl</i> 
	 *              request which encountered an error
	 */
	public boolean isAddPkgAclFailed() {
		return reason == ADDACL_FAILED;
	}
	/**
	 * Identifies a server response to a <i>change package expiration</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>change package expiration</i> 
	 *              request which was processed without error
	 */
	public boolean isChangeExpiration() {
		return reason == CHANGEEXPIRATION;
	}
	/**
	 * Identifies a server response to n <i>change package expiration</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>change package expiration</i> 
	 *              request which encountered an error
	 */
	public boolean isChangeExpirationFailed() {
		return reason == CHANGEEXPIRATION_FAILED;
	}
	/**
	 * Identifies a server response to a <i>commit package</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>commit package</i> 
	 *              request which was processed without error
	 */
	public boolean isCommit() {
		return reason == COMMIT;
	}
	/**
	 * Identifies a server response to a <i>commit package</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>commit package</i> 
	 *              request which encountered an error
	 */
	public boolean isCommitFailed() {
		return reason == COMMIT_FAILED;
	}
	/**
	 * Identifies a server response to a <i>create package</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>lID - long which identifies the package on the server</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #lID
	 * @return true if this event represents a server response for a <i>create package</i> 
	 *              request which was processed without error
	 */
	public boolean isCreated() {
		return reason == CREATE;
	}
	/**
	 * Identifies a server response to a <i>create package</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>create package</i> 
	 *              request which encountered an error
	 */
	public boolean isCreatedFailed() {
		return reason == CREATE_FAILED;
	}
	/**
	 * Identifies a server response to a <i>create group</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>create group</i> 
	 *              request which was processed without error
	 */
	public boolean isCreatedGroup() {
		return reason == CREATEGROUP;
	}
	/**
	 * Identifies a server response to a <i>create group</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>create group</i> 
	 *              request which encountered an error
	 */
	public boolean isCreatedGroupFailed() {
		return reason == CREATEGROUP_FAILED;
	}
	/**
	 * Identifies a server response to a <i>delete group</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>delete group</i> 
	 *              request which was processed without error
	 */
	public boolean isDeleteGroup() {
		return reason == DELETEGROUP;
	}
	/**
	 * Identifies a server response to a <i>delete group</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>delete group</i> 
	 *              request which encountered an error
	 */
	public boolean isDeleteGroupFailed() {
		return reason == DELETEGROUP_FAILED;
	}
	/**
	 * Identifies a server response to a <i>get project list</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>vectorData - Vector which contains String objects for each project name</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #vectorData
	 * @return true if this event represents a server response for a <i>get project list</i> 
	 *              request which was processed without error
	 */
	public boolean isGetProjectList() {
		return reason == GETPROJECTS;
	}
	/**
	 * Identifies a server response to a <i>get project list</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>get project list</i> 
	 *              request which encountered an error
	 */
	public boolean isGetProjectListFailed() {
		return reason == GETPROJECTS_FAILED;
	}
	/**
	 * Identifies a server response to a <i>manage options</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>hashData - Hashtable which contains key/value pairs for each option</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #hashData
	 * @return true if this event represents a server response for a <i>manage options</i> 
	 *              request which was processed without error
	 */
	public boolean isManageOptions() {
		return reason == MANAGEOPTIONS;
	}
	/**
	 * Identifies a server response to a <i>manage options</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>manage options</i> 
	 *              request which encountered an error
	 */
	public boolean isManageOptionsFailed() {
		return reason == MANAGEOPTIONS_FAILED;
	}
	/**
	 * Identifies a server response to a <i>mark package</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>mark package</i> 
	 *              request which was processed without error
	 */
	public boolean isMarkPackage() {
		return reason == MARKPACKAGE;
	}
	/**
	 * Identifies a server response to n <i>mark package</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>mark package</i> 
	 *              request which encountered an error
	 */
	public boolean isMarkPackageFailed() {
		return reason == MARKPACKAGE_FAILED;
	}
	/**
	 * Identifies a server response to a <i>modify group acl</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>modify group acl</i> 
	 *              request which was processed without error
	 */
	public boolean isModifyGroupAcl() {
		return reason == MODIFYGROUPACL;
	}
	/**
	 * Identifies a server response to a <i>modify group acl</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>modify group acl</i> 
	 *              request which encountered an error
	 */
	public boolean isModifyGroupAclFailed() {
		return reason == MODIFYGROUPACL_FAILED;
	}
	/**
	 * Identifies a server response to a <i>modify group attribute</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>modify group attribute</i> 
	 *              request which was processed without error
	 */
	public boolean isModifyGroupAttr() {
		return reason == MODIFYGROUPATTR;
	}
	/**
	 * Identifies a server response to a <i>modify group attribute</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>modify group attribute</i> 
	 *              request which encountered an error
	 */
	public boolean isModifyGroupAttrFailed() {
		return reason == MODIFYGROUPATTR_FAILED;
	}
	/**
	 * Identifies a server response to a <i>negotiate protocol version</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>id - integer identifying version of protocol supported</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>negotiate protocol version</i> 
	 *              request which was processed without error
	 */
	public boolean isNegotiateProtocolVersion() {
		return reason == NEGOTIATEPROTOCOL;
	}
	/**
	 * Identifies a server response to a <i>negotiate protocol version</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>negotiate protocol version</i> 
	 *              request which encountered an error
	 */
	public boolean isNegotiateProtocolVersionFailed() {
		return reason == NEGOTIATEPROTOCOL_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query file</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>fileInfo - FileInfo object</li>
	 * <li>vectorData - Vector which contains package IDs (Long objects) to which the file belongs</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #fileInfo
	 * @see #vectorData
	 * @return true if this event represents a server response for a <i>query file</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryFile() {
		return reason == QUERYFILE;
	}
	/**
	 * Identifies a server response to a <i>query file</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query file</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryFileFailed() {
		return reason == QUERYFILE_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query files</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>ownerAccessor - true if files are owned by current user</li>
	 * <li>vectorData - Vector which contains FileInfo objects for each file</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #ownerAccessor
	 * @see #vectorData
	 * @see #FileInfo
	 * @return true if this event represents a server response for a <i>query files</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryFiles() {
		return reason == QUERYFILES;
	}
	/**
	 * Identifies a server response to a <i>query files</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query files</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryFilesFailed() {
		return reason == QUERYFILES_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query groups</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>query groups</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryGroups() {
		return reason == QUERYGROUPS;
	}
	/**
	 * Identifies a server response to a <i>query groups</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query groups</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryGroupsFailed() {
		return reason == QUERYGROUPS_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query package</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>pkgInfo - PackageInfo object</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #pkgInfo
	 * @see #PackageInfo
	 * @return true if this event represents a server response for a <i>query package</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryPackage() {
		return reason == QUERYPKG;
	}
	/**
	 * Identifies a server response to a <i>query package acls</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>vectorData - Vector which contains AclInfo objects</li>
	 * <li>staticOnly - boolean which is true if the AclInfo objects represent the
	 *                  original recipient list</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #vectorData
	 * @see #AclInfo
	 * @return true if this event represents a server response for a <i>query package acls</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryPackageAcls() {
		return reason == QUERYPKGACLS;
	}
	/**
	 * Identifies a server response to a <i>query package acls</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query package acls</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryPackageAclsFailed() {
		return reason == QUERYPKGACLS_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query package contents</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>lID - package identifier to which the FileInfo objects belong</li>
	 * <li>vectorData - Vector which contains FileInfo objects for each file in the package</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #lID
	 * @see #vectorData
	 * @see #FileInfo
	 * @return true if this event represents a server response for a <i>query package contents</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryPackageContents() {
		return reason == QUERYCONTENTS;
	}
	/**
	 * Identifies a server response to a <i>query package contents</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query package contents</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryPackageContentsFailed() {
		return reason == QUERYCONTENTS_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query package</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query package</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryPackageFailed() {
		return reason == QUERYPKG_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query package file acls</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>vectorData - Vector which contains AclInfo objects</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #vectorData
	 * @see #AclInfo
	 * @return true if this event represents a server response for a <i>query package file acls</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryPackageFileAcls() {
		return reason == QUERYFILEACLS;
	}
	/**
	 * Identifies a server response to a <i>query package file acls</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query package file acls</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryPackageFileAclsFailed() {
		return reason == QUERYFILEACLS_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query packages</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>ownerAccessor - true if packages are owned by current user</li>
	 * <li>vectorData - Vector which contains PackageInfo objects for each package</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #ownerAccessor
	 * @see #vectorData
	 * @see #PackageInfo
	 * @return true if this event represents a server response for a <i>query packages</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryPackages() {
		return reason == QUERYPKGS;
	}
	/**
	 * Identifies a server response to a <i>query packages</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query packages</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryPackagesFailed() {
		return reason == QUERYPKGS_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query storage pool</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>vectorData - Vector which contains PoolInfo objects for each pool</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #vectorData
	 * @see #PackageInfo
	 * @return true if this event represents a server response for a <i>query storage pool</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryStoragePool() {
		return reason == QUERYSTORAGEPOOL;
	}
	/**
	 * Identifies a server response to a <i>query storage pool</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query storage pool</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryStoragePoolFailed() {
		return reason == QUERYSTORAGEPOOL_FAILED;
	}
	/**
	 * Identifies a server response to a <i>query storage pools</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>vectorData - Vector which contains PoolInfo objects for each pool</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #vectorData
	 * @return true if this event represents a server response for a <i>query storage pools</i> 
	 *              request which was processed without error
	 */
	public boolean isQueryStoragePools() {
		return reason == QUERYSTORAGEPOOLS;
	}
	/**
	 * Identifies a server response to a <i>query storage pools</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>query storage pools</i> 
	 *              request which encountered an error
	 */
	public boolean isQueryStoragePoolsFailed() {
		return reason == QUERYSTORAGEPOOLS_FAILED;
	}
	/**
	 * Identifies a server response to a <i>remove item from package</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>remove item from package</i> 
	 *              request which was processed without error
	 */
	public boolean isRemoveItem() {
		return reason == REMOVEITEM;
	}
	/**
	 * Identifies a server response to a <i>remove item from package</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>remove item from package</i> 
	 *              request which encountered an error
	 */
	public boolean isRemoveItemFailed() {
		return reason == REMOVEITEM_FAILED;
	}
	/**
	 * Identifies a server response to a <i>remove package acl</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * </ul>
	 *
	 * @see #handle
	 * @return true if this event represents a server response for a <i>remove package acl</i> 
	 *              request which was processed without error
	 */
	public boolean isRemovePkgAcl() {
		return reason == REMOVEACL;
	}
	/**
	 * Identifies a server response to a <i>remove package acl</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>remove package acl</i> 
	 *              request which encountered an error
	 */
	public boolean isRemovePkgAclFailed() {
		return reason == REMOVEACL_FAILED;
	}
	/**
	 * Identifies a server response to a <i>set package option</i> request. The
	 * server processed the request without error. The following properties are
	 * defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified with original request</li>
	 * <li>id - integer representation of package option flags</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #id
	 * @return true if this event represents a server response for a <i>set package option</i> 
	 *              request which was processed without error
	 */
	public boolean isSetPackageOption() {
		return reason == SETPKGOPTION;
	}
	/**
	 * Identifies a server response to a <i>set package option</i> request. The
	 * server encountered an error while processing the request. The following
	 * properties are defined for this event:
	 *
	 * <ul>
	 * <li>handle - byte identifier specified on original request</li>
	 * <li>message - string which indicates error encountered</li>
	 * </ul>
	 *
	 * @see #handle
	 * @see #message
	 * @return true if this event represents a server response for a <i>set package option</i> 
	 *              request which encountered an error
	 */
	public boolean isSetPackageOptionFailed() {
		return reason == SETPKGOPTION_FAILED;
	}
}
