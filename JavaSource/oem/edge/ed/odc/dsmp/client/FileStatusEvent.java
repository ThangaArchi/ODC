package oem.edge.ed.odc.dsmp.client;

import oem.edge.ed.odc.dropbox.common.DropboxGenerator;
import oem.edge.ed.odc.dropbox.common.FileInfo;
import oem.edge.ed.odc.dsmp.common.DSMPEvent;
/*                       Copyright Header Check                             */
/*   --------------------------------------------------------------------   */
/*                                                                          */
/*     OCO Source Materials                                                 */
/*                                                                          */
/*     Product(s): PROFIT                                                   */
/*                                                                          */
/*     (C)Copyright IBM Corp. 2003-2006                                     */
/*                                                                          */
/*     All Rights Reserved                                                  */
/*     US Government Users Restricted Rights                                */
/*                                                                          */
/*     The source code for this program is not published or otherwise       */
/*     divested of its trade secrets, irrespective of what has been         */
/*     deposited with the US Copyright Office.                              */
/*                                                                          */
/*   --------------------------------------------------------------------   */
/*     Please do not remove any of these commented lines  20 lines          */
/*   --------------------------------------------------------------------   */
/*                       Copyright Footer Check                             */

/**
 * A FileStatusTableModel event generated by a FileStatusTableModel in response to file transfer
 * activities. See the is*() methods for definition of valid properties
 * set for specific event types.
 *
 * @version 1.0.0.0 02/21/2003
 * @author Mike Zarnick
 */
public class FileStatusEvent extends DSMPEvent {
	/**
	 * Constant used to indicate event is a file status change.
	 * @see #isFileBegun()
	 * @see #isFileEnded()
	 * @see #isFileComplete()
	 * @see #isFileFailed()
	 * @see #reason
	 */
	public static int FILE_STATUS = 0;
	/**
	 * Constant used to indicate event is all grouped file transfers completed successfully.
	 * @see #isPackageComplete()
	 * @see #reason
	 */
	public static int PKG_COMPLETE = 1;
	/**
	 * Constant used to indicate event is grouped file transfers ongoing, refresh gui.
	 * @see #isRefreshPackage()
	 * @see #reason
	 */
	public static int PKG_REFRESH = 2;
	
	/**
	 * A FileInfo object. Not always valid, see various is*() methods to determine
	 * if property is set. Use FileInfo.getFileName() to retrieve file name.
	 **/
	public FileInfo info = null;
	/**
	 * A String which identifies the source of a file. Not always valid, see various
	 * is*() methods to determine if property is set.
	 **/
	public String source = null;
	/**
	 * A long which identifies the package. Not always valid, see various
	 * is*() methods to determine if property is set.
	 **/
	public long packageID = -1;
	/**
	 * A String which identifies the error encountered. Not always valid, see various
	 * is*() methods to determine if property is set.
	 **/
	//public String error = null;
	/**
	 * A boolean which is true if the transfer is just beginning. Not always valid, see various
	 * is*() methods to determine if property is set.
	 **/
	public boolean isBegun = false;
	/**
	 * A boolean which is true if the transfer is an upload. Not always valid, see various
	 * is*() methods to determine if property is set.
	 **/
	public boolean isUpload = false;
/**
 * FileStatusEvent constructor for package complete events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as a FileStatusListener with FileStatusTableModel instead.</p>
 * @param pkgID long
 *
 * @see #reason
 * @see #packageID
 * @see #FileStatusTableModel.addFileStatusListener()
 */
public FileStatusEvent(long pkgID) {
	this(pkgID,false);
}
/**
 * FileStatusEvent constructor for package refresh events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as a FileStatusListener with FileStatusTableModel instead.</p>
 * @param pkgID long
 *
 * @see #reason
 * @see #packageID
 * @see #FileStatusTableModel.addFileStatusListener()
 */
public FileStatusEvent(long pkgID, boolean isRefresh) {
	super(isRefresh ? PKG_REFRESH : PKG_COMPLETE,(byte) 0,(byte) 0);
	this.packageID = pkgID;
}
/**
 * FileStatusEvent constructor for file events.
 * <p>This constructor is not normally called directly. Those interested in receiving these events
 * should register as a FileStatusListener with FileStatusTableModel instead.</p>
 * @param fi FileInfo
 * @param pID long
 * @param src String
 * @param error String
 *
 * @see #reason
 * @see #info
 * @see #packageID
 * @see #sourceDir
 * @see #error
 * @see #FileStatusTableModel.addFileStatusListener()
 */
public FileStatusEvent(FileInfo fi, long pID, String src,
		//String error,
		boolean isBegun, Boolean upload) {
	super(FILE_STATUS, (byte) 0, (byte) 0);
	this.info = fi;
	this.source = src;
	this.packageID = pID;
	//this.error = error;
	this.isBegun = isBegun;
	this.isUpload = upload.booleanValue();
}
/**
 * Indicates that FileStatusTableModel transfer file request for the specified file has
 * begun. The FileInfo object identifies the corresponding file.
 *
 * <ul>
 * <li>info - FileInfo object which represents the file whose transfer has begun.</li>
 * <li>packageID - long identifier of the for which all files uploaded successfully</li>
 * <li>sourceDir - local directory for the file</li>
 * <li>isUpload - true if transfer is an upload</li>
 * </ul>
 *
 * @see #info
 * @see #packageID
 * @see #sourceDir
 * @see #isUpload
 * @return true if this event indicates that FileStatusTableModel has begun to transfer
 *              the file specified
 */
public boolean isFileBegun() {
	return reason == FILE_STATUS && isBegun;
}
/**
 * Indicates that the FileStatusTableModel transfer file request for the specified file has
 * ended and was a success. The FileInfo object identifies the corresponding file.
 *
 * <ul>
 * <li>info - FileInfo object which represents the file whose transfer has begun.</li>
 * <li>packageID - long identifier of the for which all files uploaded successfully</li>
 * <li>sourceDir - local directory for the file</li>
 * <li>isUpload - true if transfer is an upload</li>
 * </ul>
 *
 * @see #info
 * @see #packageID
 * @see #sourceDir
 * @see #isUpload
 * @return true if this event indicates that FileStatusTableModel has successfully transferred
 *              the file specified
 */
public boolean isFileComplete() {
	return isFileEnded() && info.getFileStatus() == DropboxGenerator.STATUS_COMPLETE;
}
/**
 * Indicates that the FileStatusTableModel transfer file request for the specified file has
 * ended. The FileInfo object identifies the corresponding file.
 *
 * <ul>
 * <li>info - FileInfo object which represents the file whose transfer has begun.</li>
 * <li>packageID - long identifier of the for which all files uploaded successfully</li>
 * <li>sourceDir - local directory for the file</li>
 * <li>isUpload - true if transfer is an upload</li>
 * </ul>
 *
 * @see #info
 * @see #packageID
 * @see #sourceDir
 * @see #isUpload
 * @return true if this event indicates that FileStatusTableModel has ended the transfer
 *              of the file specified
 */
public boolean isFileEnded() {
	return reason == FILE_STATUS && ! isBegun;
}
/**
 * Indicates that the FileStatusTableModel transfer file request for the specified file has
 * ended and failed. The FileInfo object identifies the corresponding file.
 *
 * <ul>
 * <li>info - FileInfo object which represents the file whose transfer has begun.</li>
 * <li>packageID - long identifier of the for which all files uploaded successfully</li>
 * <li>sourceDir - local directory for the file</li>
 * <li>error - String which defines the reason for the failure</li>
 * <li>isUpload - true if transfer is an upload</li>
 * </ul>
 *
 * @see #info
 * @see #packageID
 * @see #sourceDir
 * @see #error
 * @see #isUpload
 * @return true if this event indicates that FileStatusTableModel has failed to transfer
 *              the file specified completely
 */
public boolean isFileFailed() {
	return isFileEnded() && info.getFileStatus() == DropboxGenerator.STATUS_INCOMPLETE;
}
/**
 * Indicates that the FileStatusTableModel transfer file request for the specified files has
 * ended and was a success.
 *
 * <ul>
 * <li>packageID - long identifier of the for which all files uploaded successfully</li>
 * </ul>
 *
 * @see #packageID
 * @return true if this event indicates that FileStatusTableModel has successfully transferred
 *              all files of the specified package
 */
public boolean isPackageComplete() {
	return reason == PKG_COMPLETE;
}
/**
 * Indicates that the FileStatusTableModel transfer file request for the specified files is
 * still ongoing, is taking a length time and an interim status update is suggested.
 *
 * <ul>
 * <li>packageID - long identifier of the package for which a status update is suggested</li>
 * </ul>
 *
 * @see #packageID
 * @return true if this event indicates that FileStatusTableModel has recommended that 
 *              a status update on the package be done
 */
public boolean isRefreshPackage() {
	return reason == PKG_REFRESH;
}
}
